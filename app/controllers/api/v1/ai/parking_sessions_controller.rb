module Api
  module V1
    module Ai
      class ParkingSessionsController < ::Api::V1::Ai::ApplicationController
        after_action :send_error_event

        api :GET, '/api/v1/ai/parking_sessions', 'All active parking sessions for vehicles inside parking lot'
        param :parking_lot_id, Integer, 'Parking lot ID', required: false
        header :Authorization, 'Auth token for AI module', required: true

        def index
          render json: {
            id: parking_lot.id,
            outline: parking_lot.outline,
            cameras: ActiveModel::Serializer::CollectionSerializer.new(parking_lot.cameras, serializer: CameraSerializer),
            sessions: ActiveModel::Serializer::CollectionSerializer.new(
              parking_lot.parking_sessions.with_attached_images.includes(:vehicle).inside_parking_lot,
              serializer: serializer
            ),
            slots: ActiveModel::Serializer::CollectionSerializer.new(parking_lot.parking_slots, serializer: ParkingSlotSerializer)
          }
        end

        api :POST, '/api/v1/ai/parking_sessions/car_entrance', 'Create new parking session. Event should be trigerred when car enters the parking lot'
        param :timestamp, Integer, required: true
        param :parking_lot_id, Integer, 'Parking lot ID', required: false
        param :parking_session, Hash, required: true do
          param :uuid, String, 'Uniq parking session identifier, generated by AI', required: true
          param :plate_number, String, 'Vehicle plate number, if empty - admin will be notified about unrecognized vehicle', required: true
          param :vehicle_type, String, required: false
          param :color, String, required: false
          param :vehicle_images, Array, 'If plate_number is not sent, this should be sent, this is an array of plate number images (can be base64 or file)', required: false
        end
        header :Authorization, 'Auth token for AI module', required: true

        def car_entrance
          @result = ::ParkingSessions::CarEntrance.run(payload.merge(event_type: :car_entrance))
          respond_with @result, serializer: serializer
        end

        api :POST, '/api/v1/ai/parking_sessions/car_exit', 'Cancel parking session. Event should be trigerred when car leaves parking lot'
        param :parking_lot_id, Integer, 'Parking lot ID', required: false
        param :timestamp, Integer, required: true
        param :parking_session, Hash, required: true do
          param :uuid, String, 'Uniq parking session identifier, generated by AI', required: true
          param :plate_number, String, 'Vehicle plate number, if empty - admin will be notified about unrecognized vehicle', required: false
          param :vehicle_type, String, required: false
          param :color, String, required: false
          param :vehicle_images, Array, 'If plate_number is not sent, this should be sent, this is an array of plate number images (can be base64 or file)', required: false
        end
        header :Authorization, 'Auth token for AI module', required: true

        def car_exit
          @result = ::ParkingSessions::CarExit.run(payload.merge(event_type: :car_exit))
          respond_with @result, serializer: serializer
        end

        api :POST, '/api/v1/ai/parking_sessions/car_parked', 'Car occupies parking slot (space). Event should be trigerred when car occupies parking slot (space)'
        param :parking_lot_id, Integer, 'Parking lot ID', required: false
        param :timestamp, Integer, required: true
        param :parking_session, Hash, required: true do
          param :uuid, String, 'Uniq parking session identifier, generated by AI', required: true
          param :parking_slot_id, Integer, 'Occupied parking slot id', required: true
          param :plate_number, String, 'Vehicle plate number, if empty - admin will be notified about unrecognized vehicle', required: false
          param :vehicle_type, String, required: false
          param :color, String, required: false
          param :vehicle_images, Array, 'If plate_number is not sent, this should be sent, this is an array of plate number images (can be base64 or file)', required: false
        end
        header :Authorization, 'Auth token for AI module', required: true

        def car_parked
          @result = ::ParkingSessions::CarParked.run(payload.merge(event_type: :car_parked))
          respond_with @result, serializer: serializer
        end

        api :POST, '/api/v1/ai/parking_sessions/car_left', 'Car leaves parking slot (space). Event should be trigerred when car leaves parking slot (space)'
        param :timestamp, Integer, required: true
        param :parking_lot_id, Integer, 'Parking lot ID', required: false
        param :parking_session, Hash, required: true do
          param :uuid, String, 'Uniq parking session identifier, generated by AI', required: true
          param :plate_number, String, 'Vehicle plate number, if empty - admin will be notified about unrecognized vehicle', required: false
          param :vehicle_type, String, required: false
          param :color, String, required: false
          param :vehicle_images, Array, 'If plate_number is not sent, this should be sent, this is an array of plate number images (can be base64 or file)', required: false
        end
        header :Authorization, 'Auth token for AI module', required: true

        def car_left
          @result = ::ParkingSessions::CarLeft.run(payload)
          respond_with @result, serializer: serializer
        end

        api :POST, '/api/v1/ai/parking_sessions/violation_commited', 'Violation commited in the parking lot. Event should be trigerred when violation commited'
        param :violation_type, ::Parking::Rule.names.keys, required: true
        param :parking_lot_id, Integer, 'Parking lot ID', required: false
        param :parking_session, Hash, required: true do
          param :uuid, String, 'Uniq parking session identifier, generated by AI', required: true
          param :images, Array, 'Violation images'
        end
        header :Authorization, 'Auth token for AI module', required: true

        def violation_commited
          rule = parking_lot.rules.find_by(name: params[:violation_type])
          return head :ok unless rule.status
          @result = ParkingSessions::ViolationCommited.run(payload.merge(event_type: :violation_commited))
          respond_with @result, serializer: ViolationSerializer
        end

        private

        def send_error_event
          return unless Rails.env.production?
          if status == 422
            messages = JSON.parse(response.body)['errors']
            messages.each do |_k, message|
             ::Ai::SlackNotifier.ping(I18n.t("slack_notifier.ai.ai_event", event: message[0], status: status, env: Rails.env, uuid: params[:parking_session][:uuid].to_s))
            end
          end
        end

        def payload
          params.to_unsafe_hash.merge(parking_lot: parking_lot)
            .merge(params.to_unsafe_hash.delete(:parking_session) || {})
        end

        def serializer
          ::Api::V1::Ai::ParkingSessionSerializer
        end

      end
    end
  end
end
